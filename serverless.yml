org: drapaiton
app: openweather-app
service: openweather-insights

frameworkVersion: '2'
useDotenv: true
configValidationMode: error

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: non-linux

  LIMIT_OUTPUT: ${param:LIMIT_OUTPUT}
  LATITUDE: ${param:LATITUDE}
  LONGITUDE: ${param:LONGITUDE}
  APPID: ${param:APPID}
  DYNAMODB_TABLE: openweather_nexte

provider:
  name: aws
  stage: dev # Default stage to be used. Default is "dev"
  region: us-east-2
  runtime: python3.7
  lambdaHashingVersion: 20201221
  memorySize: 512 # Overwrite the default memory size. Default is 1024
  timeout: 10 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  environment:
    DYNAMODB_TABLE: ${self:custom.DYNAMODB_TABLE}
  iam:
    role:
      statements: # permissions for all of your functions can be set here
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: "arn:aws:dynamodb:us-east-2:012764043529:table/openweather_nexte"

functions:
  openweather_updater:
    handler: src/synchronizer.run
    events:
      - schedule: rate(6 hours)
    environment:
      LATITUDE: ${self:custom.LATITUDE}
      LONGITUDE: ${self:custom.LONGITUDE}
      APPID: ${self:custom.APPID}
      LIMIT_OUTPUT: ${self:custom.LIMIT_OUTPUT}
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

  get_average_forecast:
    handler: src/endpoints.get_average
    events:
      - http:
          path: openweather/forecast/average
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
          request: # configure method request and integration request settings
            parameters: # Optional request parameter configuration
              querystrings:
                date_from: true
                date_to: true
            passThrough: NEVER
    environment:
      DYNAMODB_TABLE: ${self:custom.DYNAMODB_TABLE}
# The "Resources" your "Functions" use.  Raw AWS CloudFormation goes in here.
resources:
  Resources:
    openweatherNexte:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: openweather_nexte
        AttributeDefinitions:
          - AttributeName: dt_difference
            AttributeType: N
          - AttributeName: dt
            AttributeType: N
        KeySchema:
          - AttributeName: dt_difference
            KeyType: HASH
          - AttributeName: dt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3